1) Class - Movie

The class Movie is stated below.
An instance of class Movie represents a film.
This class has the following three properties:

- title, which is a String representing the title of the movie
- studio, which is a String representing the studio that made the movie
- rating, which is a String representing the rating of the movie (i.e. PG­13, R, etc)

a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.
ans)

class Movie {
  constructor(title, studio, rating) {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}
const movie = new Movie("Casino Royale", "Eon Productions", "PG-13");
console.log("Title:", movie.title);
console.log("Studio:", movie.studio);
console.log("Rating:", movie.rating);

b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided
ans)

class Movie {
  constructor(title, studio, rating = "PG") {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}
const movie1 = new Movie("The Shawshank Redemption", "Warner Bros.", "R");
const movie2 = new Movie("Casino Royale", "Eon Productions");
console.log("Movie 1 - Title:", movie1.title);
console.log("Movie 1 - Studio:", movie1.studio);
console.log("Movie 1 - Rating:", movie1.rating);

console.log("Movie 2 - Title:", movie2.title);
console.log("Movie 2 - Studio:", movie2.studio);
console.log("Movie 2 - Rating:", movie2.rating);

c)  Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.
ans)

class Movie {
  constructor(title, studio, rating) {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
static getPG(movieArray) {
    return movieArray.filter(movie => movie.rating === "PG");
  }
}
const movies = [
  new Movie("Movie1", "Studio1", "PG"),
  new Movie("Movie2", "Studio2", "PG-13"),
  new Movie("Movie3", "Studio3", "R"),
  new Movie("Movie4", "Studio4", "PG"),
];
const pgMovies = Movie.getPG(movies);
console.log(pgMovies);

d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”
ans)

class Movie {
  constructor(title, studio, rating) {
    this.title = title;
    this.studio = studio;
    this.rating = rating;
  }
}
const casinoRoyale = new Movie("Casino Royale", "Eon Productions", "PG-13");
console.log("Title:", casinoRoyale.title);
console.log("Studio:", casinoRoyale.studio);
console.log("Rating:", casinoRoyale.rating);


2)Convert the UML diagram to Typescript class. - use number for double

ans)

class Circle {
  constructor(radius) {
    this.radius = radius;
  }

  getRadius() {
    return this.radius;
  }

  setRadius(radius) {
    this.radius = radius;
  }

  getArea() {
    return Math.PI * Math.pow(this.radius, 2);
  }

  getCircumference() {
    return 2 * Math.PI * this.radius;
  }
}
const circle = new Circle(5);
console.log("Radius:", circle.getRadius());
console.log("Area:", circle.getArea());
console.log("Circumference:", circle.getCircumference());

3)Write a “person” class to hold all the details.
ans)

class Person {
  constructor(firstName, lastName, age, email, phoneNumber) {
    this.firstName = firstName;
    this.lastName = lastName;
    this.age = age;
    this.email = email;
    this.phoneNumber = phoneNumber;
  }
 getFullName() {
    return `${this.firstName} ${this.lastName}`;
  }
  getContactInfo() {
    return `Email: ${this.email}, Phone Number: ${this.phoneNumber}`;
  }
  isAdult() {
    return this.age >= 18;
  }
}
const person1 = new Person("Christopher", "Charles", 24, "charles@example.com", "123-456-7890");

console.log(person1.getFullName());
console.log(person1.getContactInfo());
console.log(person1.isAdult()); 
 
4) write a class to calculate the uber price.

ans)
class UberPricingCalculator {
  constructor(baseFare, costPerKilometer, costPerMinute, surgeMultiplier) {
    this.baseFare = baseFare;
    this.costPerKilometer = costPerKilometer;
    this.costPerMinute = costPerMinute;
    this.surgeMultiplier = surgeMultiplier;
  }

  calculatePrice(distanceInKm, timeInMinutes, isSurge) {
    let price = this.baseFare + (distanceInKm * this.costPerKilometer) + (timeInMinutes * this.costPerMinute);
    
    if (isSurge) {
      price *= this.surgeMultiplier;
    }

    return price;
  }
}
const uberCalculator = new UberPricingCalculator(5, 1.5, 0.25, 1.5);

const distance = 10;
const time = 20; 
const isSurge = true; 

const price = uberCalculator.calculatePrice(distance, time, isSurge);
console.log(`Uber Price: $${price.toFixed(2)}`);



